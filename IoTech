import cv2
import os
import time
from ultralytics import YOLO

# === CONFIGURAÇÕES ===
FOCAL = 250
REAL_WIDTH = 40.0  # largura média do corpo humano (em cm)
MAX_DESAPARECIDO = 2.0  # segundos até considerar que a pessoa sumiu

def estimar_distancia(pixel_width):
    if pixel_width == 0:
        return None
    return (REAL_WIDTH * FOCAL) / pixel_width

def salvar_comando(texto):
    with open("comando.txt", "w") as f:
        f.write(texto)

def iniciar_terminal():
    if os.name == 'nt':
        os.system("start cmd /k python terminal_comando.py")
    else:
        os.system("x-terminal-emulator -e 'python3 terminal_comando.py' &")

# === INICIAR TERMINAL DE COMANDO ===
iniciar_terminal()

# === CARREGAR MODELO YOLOv8 ===
modelo = YOLO('yolov8n.pt')

# === CAPTURA DE VÍDEO ===
cap = cv2.VideoCapture(0)
cap.set(cv2.CAP_PROP_FRAME_WIDTH, 320)
cap.set(cv2.CAP_PROP_FRAME_HEIGHT, 240)

ultimo_estado = ""
pessoa_selecionada = None
tempo_ultima_deteccao = time.time()

while True:
    ret, frame = cap.read()
    if not ret:
        continue

    results = modelo(frame, verbose=False)[0]
    pessoas = [det for det in results.boxes.data.tolist() if int(det[5]) == 0]  # classe 0 = pessoa

    comando_distancia = "Nada detectado"
    comando_direcao = ""
    info_extra = ""
    largura_frame = frame.shape[1]

    selecionada = None
    dist_minima = float('inf')

    if pessoas:
        centros = []

        for det in pessoas:
            x1, y1, x2, y2, conf, cls = det
            cx = (x1 + x2) / 2
            cy = (y1 + y2) / 2
            centros.append(((x1, y1, x2, y2), (cx, cy)))

        if pessoa_selecionada is None:
            # Primeira detecção: selecionar a primeira pessoa detectada
            pessoa_selecionada = centros[0][1]
            selecionada = centros[0][0]
            tempo_ultima_deteccao = time.time()
        else:
            # Achar a pessoa mais próxima da posição inicial
            for (box, centro) in centros:
                dist = ((centro[0] - pessoa_selecionada[0]) ** 2 + (centro[1] - pessoa_selecionada[1]) ** 2) ** 0.5
                if dist < dist_minima:
                    dist_minima = dist
                    selecionada = box

            if dist_minima < 100:  # tolerância de movimento
                pessoa_selecionada = ((selecionada[0] + selecionada[2]) / 2,
                                      (selecionada[1] + selecionada[3]) / 2)
                tempo_ultima_deteccao = time.time()
            elif time.time() - tempo_ultima_deteccao > MAX_DESAPARECIDO:
                # Considerar que a pessoa sumiu e resetar
                pessoa_selecionada = centros[0][1]
                selecionada = centros[0][0]
                tempo_ultima_deteccao = time.time()

    # Se selecionou uma pessoa:
    if selecionada:
        x1, y1, x2, y2 = map(int, selecionada)
        w = x2 - x1
        centro_x = x1 + w // 2

        distancia = estimar_distancia(w)

        if distancia is not None:
            if distancia > 100:
                comando_distancia = "Andar pra frente"
            elif distancia < 40:
                comando_distancia = "Parar / Reduzir"
            else:
                comando_distancia = "Seguir mantendo distância"

        if centro_x < largura_frame * 0.4:
            comando_direcao = "Vire à esquerda"
        elif centro_x > largura_frame * 0.6:
            comando_direcao = "Vire à direita"
        else:
            comando_direcao = "Siga em frente"

        info_extra = f"Distância: {int(distancia) if distancia else '??'} cm"

        # Desenha a caixa
        cv2.rectangle(frame, (x1, y1), (x2, y2), (0, 255, 0), 2)
        cv2.putText(frame, "Pessoa-alvo", (x1, y1 - 10),
                    cv2.FONT_HERSHEY_SIMPLEX, 0.6, (0, 255, 0), 2)

    estado = f"Comando: {comando_distancia}\nDireção: {comando_direcao}\n{info_extra}"

    if estado != ultimo_estado:
        salvar_comando(estado)
        ultimo_estado = estado

    cv2.imshow("Câmera - Rastreamento Prioritário", frame)
    if cv2.waitKey(1) & 0xFF == ord('q'):
        break

cap.release()
cv2.destroyAllWindows()